#!/bin/bash

# Copyright â“’ 2016 Mattias Bengtsson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with This program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: Mattias Bengtsson <mattias.jc.bengtsson@gmail.com>

_subcommand=$(basename "${0}")
_subcommand=${_subcommand/git-/}

function _wip {
    [ "${_subcommand}" == "wip" ]
}

function _local {
    [ "${_subcommand}" == "local" ]
}

function _help-flag {
    [[ " ${*} " == *" --help "* ]] || [[ " ${*} " == *" -h "* ]]
}

function _select-commit {
    local IFS=$'\n'
    local _commits

    mapfile -t _commits < <(git --no-pager "${_subcommand}" log --oneline)

    if command -v fzf >/dev/null; then
        printf "%s\n" "${_commits[@]}" \
            | fzf --ansi --height $(( ${#_commits[@]} + 2))
    else
        select commit in "${_commits[@]}"; do
            echo "${commit}"
            break
        done
    fi | cut -f1 -d" "
}

function autosquash {
    if _help-flag "${@}"; then
        echo "Usage: git ${_subcommand} autosquash [rebase-flags]"
        echo
        echo "Short-hand for:"
        echo "  EDITOR=true git rebase -i --autosquash [rebase-flags] \"\$(git ${_subcommand} rebase-point)\""
    else
        local _rp
        if _rp="$(rebase-point)"; then
            GIT_SEQUENCE_EDITOR=true git rebase -i --autosquash "${@}" "${_rp}"
        fi
    fi
}

function fixup {
    if _help-flag "${@}"; then
        echo "Usage: git ${_subcommand} fixup [commit-flags]"
        echo
        echo "Add a fixup commit to a previous commit."
    else
        local commit _rp
        if _rp="$(rebase-point)"; then
            commit="$(_select-commit "${_rp}")"
            git commit "${@}" --fixup="${commit}"
        fi
    fi
}

function for-all {
    if _help-flag "${@}"; then
        echo "Usage: git ${_subcommand} foreach <COMMAND>"
        echo
        echo "Run <COMMAND> over all commits, stopping in case of failure."
        echo "git rebase -x <COMMAND> \"\$(git ${_subcommand} rebase-point)\""
    else
        local _rp
        if _rp="$(rebase-point)"; then
            git rebase -x "${@}" "${_rp}"
        fi
    fi
}

function log {
    if _help-flag "${@}"; then
        echo "Usage: git ${_subcommand} log [log-flags]"
        echo
        echo "Short-hand for:"
        echo "  git log [log-flags] \"\$(git ${_subcommand} rebase-point)\".."
    else
        local _rp
        if _rp="$(rebase-point)"; then
            git log "${@}" "${_rp}"..
        fi
    fi
}

function reapply {
    if _help-flag "${@}"; then
        echo "Usage: git ${_subcommand} reapply [rebase-flags]"
        echo
        echo "Short-hand for:"
        echo "  git rebase -i [rebase-flags] \"\$(git ${_subcommand} rebase-point)\""
    else
        local _rp
        if _rp="$(rebase-point)"; then
            git rebase -i "${@}" "${_rp}"
        fi
    fi
}

function rebase-point {
    if _wip; then
        for ref in $(git rev-list --parents "HEAD"); do
            if [ "$(git branch --contains "${ref}" | wc -l)" -gt 1 ]; then
                echo "${ref}"
                exit 0
            fi
        done
    elif _local; then
        git merge-base HEAD "@{upstream}" && exit 0
    fi

    echo "No suitable rebase-point found!" >> /dev/stderr
    exit 1
}

function squash {
    if _help-flag "${@}"; then
        echo "Usage: git ${_subcommand} squash [commit-flags]"
        echo
        echo "Add a squash commit to a previous commit."
    else
        local commit _rp
        if _rp="$(rebase-point)"; then
            commit="$(_select-commit "${_rp}")"
            git commit "${@}" --squash="${commit}"
        fi
    fi
}

arg="${1}"
shift
case "${arg}" in
    autosquash)
        autosquash "${@}"
        ;;
    fixup)
        fixup "${@}"
        ;;
    for-all)
        for-all "${@}"
        ;;
    log)
        log "${@}"
        ;;
    reapply)
        reapply "${@}"
        ;;
    rebase-point)
        rebase-point "${@}"
        ;;
    squash)
        squash "${@}"
        ;;
    *)
        echo "Usage: git ${_subcommand} [command] [<option>]"
        echo

        _wip   && echo "  git wip helps you modify commits since the latest branch-point"
        _wip   && echo "  All commands work only on the commits unique to this branch"

        _local && echo "  git local helps you modify commits not yet pushed upstream"
        _local && echo "  All commands work only on your local, not yet pushed, commits"

        echo
        echo "Commands:"
        echo "  autosquash          Automatically squash all squash! and fixup! commits"
        echo "  for-all             Run a command over all commits, stopping in case of failure."
        echo "  fixup               Add a fixup commit to a previous commit."
        echo "  log                 Show commit logs"
        echo "  reapply             Reapply all commits using an interactive rebase"
        _wip   && echo "  rebase-point        Get the parent of the first commit unique for this branch"
        _local && echo "  rebase-point        Get the parent of the first local, not yet pushed, commit"

        echo "  squash              Add a squash commit to a previous commit."
        exit 2
        ;;
esac
